<?php
/**
 * Created by PhpStorm.
 * User: roman
 * Date: 03.02.18
 * Time: 15:56
 */

namespace App\Model;

use App\Model\User\Attribute;

trait Eav
{

    private $data = [];

    private $dataAttribute = [];
    private $dataFilters = [];

    /**
     * init data attributes keys
     * void load attributes rom table
     */
    protected function _loadDataAttributesKeys()
    {
        $attributes = Attribute::all(['key']);
        foreach ($attributes as $_attribute) {
            $this->dataAttribute[] = $_attribute->key;
        }
    }

    /**
     * add attribute to filter
     * @param $attribute
     * @param $value
     * @return  $this
     */
    public function addAttributeToFilter($attribute, $value)
    {
        $this->dataFilters[$attribute] = $value;
        return $this;
    }

    /**
     * init data value
     * @return $this
     */
    protected function _loadDataValues()
    {
        if (!$this->id) {
            $this->data = [];
            return $this;
        }
        // load attribute data value
        $attributeValue = Attribute\Value::where('user_id', $this->id)->orderBy('updated_at', 'asc')->get();
        $this->data = $this->getAttributes();
        foreach ($attributeValue as $_attributeValue) {
            $this->data[$_attributeValue->attribute->key] = $_attributeValue->value;
        }
        // this attribute empty
        foreach ($this->getDataAttribute() as $_keyAttribute) {
            if(!isset($this->data[$_keyAttribute])) {
                $this->data[$_keyAttribute] = null;
            }
        }

        return $this;
    }

    /**
     * get all data values
     *
     * @param string $key
     *
     * @return mixed
     */
    public function getData($key = null)
    {
        if ($this->data === null) {
            $this->_loadDataValues();
        }

        if (!$key) {
            return $this->data;
        } else {
            if (isset($this->data[$key])) {
                return $this->data[$key];
            } else {
                return null;
            }
        }
    }

    /**
     * set data
     * @param $key
     * @param $value
     * @return $this
     */
    public function setData($key, $value)
    {
        $this->data[$key] = $value;
        return $this;
    }

    /**
     *
     * setData and getData aliases
     *
     * @param $method
     * @param $parameters
     * @return $this
     */
    public function __call($method, $parameters)
    {
        $prefixMethod = mb_substr($method, 0, 3);
        $prefixMethod = mb_strtolower($prefixMethod);

        if ($prefixMethod == 'get') {
            $key = $this->_purseKey($method);
            if ($this->getData($key) !== false) {
                return $this->getData($key);
            }
        } elseif ($prefixMethod == 'set') {
            $key = $this->_purseKey($method);
            $value = reset($parameters);
            $this->data[$key] = $value;
            return $this;
        }

        return parent::__call($method, $parameters); // TODO: Change the autogenerated stub
    }

    /**
     * purse key
     * @param $method
     * @return string
     */
    private function _purseKey($method)
    {
        $method = str_replace(['set', 'get'], '', $method);
        $method = lcfirst($method);

        if (strcspn($method, 'ABCDEFGHJIJKLMNOPQRSTUVWXYZ') == strlen($method)) {
            return strtolower($method);
        } else {
            $key1 = substr($method, 0, strcspn($method, 'ABCDEFGHJIJKLMNOPQRSTUVWXYZ'));
            $key2 = substr($method, strlen($key1), strlen($method) - strlen($key1));
            return strtolower($key1 . '_' . $key2);
        }
    }

    public function save(array $options = [])
    {
        // save standard field parameters
        foreach ($this->getData() as $key => $value) {
            if (!$this->_isDataAttribute($key)) {
                $this->{$key} = $value;
            }
        }

        parent::save($options);

        // save eav attributes
        foreach ($this->getData() as $_key => $_value) {
            if (is_array($_value)) {
                $_value = json_encode($_value);
            }

            if ($this->_isDataAttribute($_key)) {
                $this->_saveAttributeToModel($_key, $_value);
            }
        }
    }

    /**
     * save attribute value to model
     * @param $key
     * @param $value
     * @return bool
     */
    protected function _saveAttributeToModel($key, $value)
    {
        if(!$this->id || !$value) {
            return $this;
        }
        $userAttribute = new Attribute\Value();
        $id = Attribute::where('key', $key)->first()->id;
        $userAttribute->attribute_id = $id;
        $userAttribute->value = $value;
        $userAttribute->user_id = $this->id;
        return $userAttribute->save();
    }

    /**
     * @param $key
     * @return bool
     */
    protected function _isDataAttribute($key)
    {
        return array_search($key, $this->getDataAttribute()) !== false;
    }

    /**
     * get all data atribtutes for model
     * @return null
     */
    public function getDataAttribute()
    {
        if ($this->dataAttribute === null) {
            $this->_loadDataAttributesKeys();
        }
        return $this->dataAttribute;
    }
}